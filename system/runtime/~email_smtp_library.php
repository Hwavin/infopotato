<?php
 class SMTP_Library { private $user_agent = 'InfoPotato SMTP'; private $smtp_host = ''; private $smtp_user = ''; private $smtp_pass = ''; private $smtp_port = 25; private $smtp_connection_timeout = 5; private $smtp_keepalive = FALSE; private $smtp_crypto = ''; public $smtp_dsn = FALSE; private $wordwrap = TRUE; private $wrapchars = 76; private $mailtype = 'text'; private $charset = 'UTF-8'; private $multipart_subtype = 'mixed'; private $email_validation = FALSE; private $priority = 3; private $newline = "\n"; private $crlf = "\n"; private $send_multipart = TRUE; private $bcc_batch_mode = FALSE; private $bcc_batch_size = 200; private $subject = ''; private $return_path = ''; private $body = ''; private $finalbody = ''; private $alt_message = ''; private $header_str = ''; private $smtp_connection_fp = ''; private $debug_msg = array(); private $to_recipients = array(); private $cc_recipients = array(); private $bcc_recipients = array(); private $headers = array(); private $attachments = array(); public function __construct(array $config = NULL) { if (count($config) > 0) { foreach ($config as $key => $val) { if (property_exists($this, $key)) { $method = 'initialize_'.$key; if (method_exists($this, $method)) { $this->$method($val); } } else { exit("'".$key."' is not an acceptable config argument!"); } } } $this->clear(); } private function initialize_user_agent($val) { if ( ! is_string($val)) { $this->invalid_argument_value('user_agent'); } $this->user_agent = $val; } private function initialize_smtp_host($val) { if ( ! is_string($val) || empty($val)) { $this->invalid_argument_value('smtp_host'); } $this->smtp_host = $val; } private function initialize_smtp_user($val) { if ( ! is_string($val) || empty($val)) { $this->invalid_argument_value('smtp_user'); } $this->smtp_user = $val; } private function initialize_smtp_pass($val) { if ( ! is_string($val) || empty($val)) { $this->invalid_argument_value('smtp_pass'); } $this->smtp_pass = $val; } private function initialize_smtp_port($val) { if ( ! is_int($val)) { $this->invalid_argument_value('smtp_port'); } $this->smtp_port = $val; } private function initialize_smtp_timeout($val) { if ( ! is_int($val)) { $this->invalid_argument_value('smtp_connection_timeout'); } $this->smtp_connection_timeout = $val; } private function initialize_smtp_keepalive($val) { if ( ! is_bool($val)) { $this->invalid_argument_value('smtp_keepalive'); } $this->smtp_keepalive = $val; } private function initialize_smtp_crypto($val) { if ( ! is_string($val) || ! in_array($val, array('ssl', 'tls'))) { $this->invalid_argument_value('smtp_crypto'); } if ( ! extension_loaded('openssl')) { exit('OpenSSL extension needed to use ssl or tls'); } $this->smtp_crypto = $val; } private function initialize_smtp_dsn($val) { if ( ! is_bool($val)) { $this->invalid_argument_value('smtp_dsn'); } $this->smtp_dsn = $val; } private function initialize_wordwrap($val) { if ( ! is_bool($val)) { $this->invalid_argument_value('wordwrap'); } $this->wordwrap = $val; } private function initialize_wrapchars($val) { if ( ! is_int($val)) { $this->invalid_argument_value('wrapchars'); } $this->wrapchars = $val; } private function initialize_mailtype($val) { if ( ! is_string($val) || ! in_array($val, array('text', 'html'))) { $this->invalid_argument_value('mailtype'); } $this->mailtype = $val; } private function initialize_multipart_subtype($val) { if ( ! is_string($val) || ! in_array($val, array('mixed', 'related'))) { $this->invalid_argument_value('multipart_subtype'); } $this->multipart_subtype = $val; } private function initialize_charset($val) { if ( ! is_string($val)) { $this->invalid_argument_value('charset'); } $this->charset = $val; } private function initialize_validate($val) { if ( ! is_bool($val)) { $this->invalid_argument_value('email_validation'); } $this->email_validation = $val; } private function initialize_priority($val) { if ( ! is_int($val) || ! in_array($val, array(1, 2, 3, 4, 5))) { $this->invalid_argument_value('priority'); } $priorities = array('1 (Highest)', '2 (High)', '3 (Normal)', '4 (Low)', '5 (Lowest)'); $this->priority = $priorities[$val - 1]; } private function initialize_crlf($val) { if ( ! is_string($val) || ! in_array($val, array("\n", "\r\n", "\r"))) { $this->invalid_argument_value('crlf'); } $this->crlf = $val; } private function initialize_newline($val) { if ( ! is_string($val) || ! in_array($val, array("\n", "\r\n", "\r"))) { $this->invalid_argument_value('newline'); } $this->newline = $val; } private function initialize_send_multipart($val) { if ( ! is_bool($val)) { $this->invalid_argument_value('send_multipart'); } $this->send_multipart = $val; } private function initialize_bcc_batch_mode($val) { if ( ! is_bool($val)) { $this->invalid_argument_value('bcc_batch_mode'); } $this->bcc_batch_mode = $val; } private function initialize_bcc_batch_size($val) { if ( ! is_int($val)) { $this->invalid_argument_value('bcc_batch_size'); } $this->bcc_batch_size = $val; } private function invalid_argument_value($arg) { exit('In your config array, the provided argument value of '."'".$arg."'".' is invalid.'); } public function __destruct() { if (is_resource($this->smtp_connection_fp)) { $this->send_smtp_command('quit'); } } public function clear($clear_attachments = FALSE) { $this->subject = ''; $this->return_path = ''; $this->body = ''; $this->finalbody = ''; $this->header_str = ''; $this->to_recipients = array(); $this->cc_recipients = array(); $this->bcc_recipients = array(); $this->headers = array(); $this->debug_msg = array(); if ($clear_attachments === TRUE) { $this->attachments = array(); } return $this; } public function from($from, $name = '') { if (preg_match('/\<(.*)\>/', $from, $match)) { $from = $match[1]; } if ($this->email_validation) { $this->validate_email($this->str_to_array($from)); } if ($name !== '') { if ( ! preg_match('/[\200-\377]/', $name)) { $name = '"'.addcslashes($name, "\0..\37\177'\"\\").'"'; } else { $name = $this->prep_q_encoding($name); } } $this->set_header('From', $name.' <'.$from.'>'); return $this; } public function return_path($return_path) { if (preg_match('/\<(.*)\>/', $return_path, $match)) { $return_path = $match[1]; } if ($this->email_validation) { $this->validate_email($this->str_to_array($return_path)); } $this->return_path = $return_path; return $this; } public function reply_to($reply_to, $name = '') { if (preg_match('/\<(.*)\>/', $reply_to, $match)) { $reply_to = $match[1]; } if ($this->email_validation) { $this->validate_email($this->str_to_array($reply_to)); } if ($name === '') { $name = $reply_to; } if (strpos($name, '"') !== 0) { $name = '"'.$name.'"'; } $this->set_header('Reply-To', $name.' <'.$reply_to.'>'); return $this; } public function to($to) { $to = $this->extract_email($this->str_to_array($to)); if ($this->email_validation) { $this->validate_email($to); } $this->set_header('To', implode(', ', $to)); $this->to_recipients = $to; return $this; } public function cc($cc) { $cc = $this->extract_email($this->str_to_array($cc)); if ($this->email_validation) { $this->validate_email($cc); } $this->set_header('Cc', implode(', ', $cc)); $this->cc_recipients = $cc; return $this; } public function bcc($bcc, $limit = '') { if ($limit !== '' && is_numeric($limit)) { $this->bcc_batch_mode = TRUE; $this->bcc_batch_size = $limit; } $bcc = $this->extract_email($this->str_to_array($bcc)); if ($this->email_validation) { $this->validate_email($bcc); } $this->bcc_recipients = $bcc; return $this; } public function subject($subject) { $subject = $this->prep_q_encoding($subject); $this->set_header('Subject', $subject); return $this; } public function message($body, $alt_body = '') { $this->body = rtrim(str_replace("\r", '', $body)); if (version_compare(PHP_VERSION, '5.4', '<') && get_magic_quotes_gpc()) { $this->body = stripslashes($this->body); } if ($this->mailtype === 'html') { if ($alt_body === '') { $alt_body = preg_match('/\<body.*?\>(.*)\<\/body\>/si', $this->body, $match) ? $match[1] : $this->body; $alt_body = str_replace("\t", '', preg_replace('#<!--(.*)--\>#', '', trim(strip_tags($alt_body)))); for ($i = 20; $i >= 3; $i--) { $alt_body = str_replace(str_repeat("\n", $i), "\n\n", $alt_body); } $alt_body = preg_replace('| +|', ' ', $alt_body); } $this->alt_message = ($this->wordwrap) ? $this->word_wrap($alt_body, 76) : $alt_body; } return $this; } public function attach_from_path($file_path, $newname = '', $content_type = '', $content_disposition = '') { if ( ! file_exists($file_path)) { $this->set_error_message('email_attachment_missing', $file_path); return FALSE; } $file = filesize($file_path) +1; if ( ! $fp = fopen($file_path, 'rb')) { $this->set_error_message('email_attachment_unreadable', $file_path); return FALSE; } $file_content = fread($fp, $file); fclose($fp); $this->attachments[] = array( 'name' => ($newname === '') ? basename($file_path) : $newname, 'content' => $file_content, 'content_type' => ($content_type === '') ? $this->mime_types(pathinfo($file_path, PATHINFO_EXTENSION)) : $content_type, 'content_disposition' => empty($content_disposition) ? 'attachment' : $content_disposition, ); return $this; } public function attach_from_content($file_content, $filename, $content_type, $content_disposition = '') { $this->attachments[] = array( 'name' => $filename, 'content' => $file_content, 'content_type' => $content_type, 'content_disposition' => empty($content_disposition) ? 'attachment' : $content_disposition, ); return $this; } public function send($auto_clear = TRUE) { if ( ! isset($this->headers['Reply-To'])) { $this->headers['Reply-To'] = $this->headers['From']; } if (( ! isset($this->to_recipients) && ! isset($this->headers['To'])) && ( ! isset($this->bcc_recipients) && ! isset($this->headers['Bcc'])) && ( ! isset($this->headers['Cc']))) { $this->set_error_message('email_no_recipients'); return FALSE; } $this->set_header('Date', $this->set_date()); $this->set_header('User-Agent', $this->user_agent); $this->set_header('X-Mailer', $this->user_agent); $this->set_header('X-Priority', $this->priority); $this->set_header('Mime-Version', '1.0'); $this->set_header('Message-ID', $this->create_message_id()); if ($this->bcc_batch_mode && (count($this->bcc_recipients) > $this->bcc_batch_size)) { $result = $this->batch_bcc_send(); if ($result && $auto_clear) { $this->clear(); } return $result; } if ($this->build_message() === FALSE) { return FALSE; } $result = $this->spool_email(); if ($result && $auto_clear) { $this->clear(); } return $result; } public function print_debugger($include = array('headers', 'subject', 'body')) { $msg = ''; if (count($this->debug_msg) > 0) { foreach ($this->debug_msg as $val) { $msg .= $val; } } $raw_data = ''; $include = is_array($include) ? $include : array($include); if (in_array('headers', $include, TRUE)) { $raw_data = htmlspecialchars($this->header_str)."\n"; } if (in_array('subject', $include, TRUE)) { $raw_data .= htmlspecialchars($this->subject)."\n"; } if (in_array('body', $include, TRUE)) { $raw_data .= htmlspecialchars($this->finalbody); } return $msg.($raw_data === '' ? '' : '<pre>'.$raw_data.'</pre>'); } private function batch_bcc_send() { $float = $this->bcc_batch_size - 1; $set = ''; $chunk = array(); for ($i = 0; $i < count($this->bcc_recipients); $i++) { if (isset($this->bcc_recipients[$i])) { $set .= ', '.$this->bcc_recipients[$i]; } if ($i === $float) { $chunk[] = substr($set, 1); $float = $float + $this->bcc_batch_size; $set = ''; } if ($i === count($this->bcc_recipients)-1) { $chunk[] = substr($set, 1); } } for ($i = 0; $i < count($chunk); $i++) { unset($this->headers['Bcc']); unset($bcc); $bcc = $this->extract_email($this->str_to_array($chunk[$i])); $this->bcc_recipients = $bcc; if ($this->build_message() === FALSE) { return FALSE; } $this->spool_email(); } } private function set_header($header, $value) { $this->headers[$header] = str_replace(array("\n", "\r"), '', $value); } private function str_to_array($email) { if ( ! is_array($email)) { return (strpos($email, ',') !== FALSE) ? preg_split('/[\s,]/', $email, -1, PREG_SPLIT_NO_EMPTY) : (array) trim($email); } return $email; } private function set_date() { $timezone = date('Z'); $operator = ($timezone[0] === '-') ? '-' : '+'; $timezone = abs($timezone); $timezone = floor($timezone/3600) * 100 + ($timezone % 3600 ) / 60; return sprintf("%s %s%04d", date("D, j M Y H:i:s"), $operator, $timezone); } private function create_message_id() { $from = str_replace(array('>', '<'), '', $this->headers['From']); return '<'.uniqid('InfoPotato_').strstr($from, '@').'>'; } private function get_content_type() { if ($this->mailtype === 'html') { return (count($this->attachments) > 0) ? 'html-attach' : 'html'; } if ($this->mailtype === 'text') { return (count($this->attachments) > 0) ? 'plain-attach' : 'plain'; } } private function get_content_transfer_encoding() { $content_transfer_encoding = '8bit'; if (strpos('us-ascii', $this->charset) === 0 || strpos('iso-2022-', $this->charset) === 0) { $content_transfer_encoding = '7bit'; } return $content_transfer_encoding; } private function insert_mime_message() { return 'This message is in MIME format.'.$this->newline .'Because your mail reader does not understand this format, some or all of this message may not be legible.'; } private function validate_email($email) { foreach ($email as $val) { if ( ! filter_var($val, FILTER_VALIDATE_EMAIL)) { $this->_set_error_message('email_invalid_address', $val); return FALSE; } } return TRUE; } private function extract_email($email) { if ( ! is_array($email)) { return preg_match('/\<(.*)\>/', $email, $match) ? $match[1] : $email; } $extracted_email = array(); foreach ($email as $addr) { $extracted_email[] = preg_match('/\<(.*)\>/', $addr, $match) ? $match[1] : $addr; } return $extracted_email; } private function word_wrap($str, $charlim = NULL) { if (empty($charlim)) { $charlim = empty($this->wrapchars) ? 76 : $this->wrapchars; } if (strpos($str, "\r") !== FALSE) { $str = str_replace(array("\r\n", "\r"), "\n", $str); } $str = preg_replace('| +\n|', "\n", $str); $unwrap = array(); if (preg_match_all("|(\{unwrap\}.+?\{/unwrap\})|s", $str, $matches)) { for ($i = 0; $i < count($matches['0']); $i++) { $unwrap[] = $matches[1][$i]; $str = str_replace($matches[1][$i], '{{unwrapped'.$i.'}}', $str); } } $str = wordwrap($str, $charlim, "\n", FALSE); $output = ''; foreach (explode("\n", $str) as $line) { if (strlen($line) <= $charlim) { $output .= $line.$this->newline; continue; } $temp = ''; do { if (preg_match('!\[url.+\]|://|wwww.!', $line)) { break; } $temp .= substr($line, 0, $charlim-1); $line = substr($line, $charlim-1); } while (strlen($line) > $charlim); if ($temp !== '') { $output .= $temp.$this->newline; } $output .= $line.$this->newline; } if (count($unwrap) > 0) { foreach ($unwrap as $key => $val) { $output = str_replace('{{unwrapped'.$key.'}}', $val, $output); } } return $output; } private function build_message() { if ($this->wordwrap === TRUE && $this->mailtype !== 'html') { $this->body = $this->word_wrap($this->body); } $alt_boundary = 'B_ALT_'.uniqid(''); $atc_boundary = 'B_ATC_'.uniqid(''); reset($this->headers); $this->header_str = ''; foreach ($this->headers as $key => $val) { $val = trim($val); if ($val !== '') { $this->header_str .= $key.': '.$val.$this->newline; } } $hdr = ''; $body = ''; switch ($this->get_content_type()) { case 'plain' : $hdr .= 'Content-Type: text/plain; charset='.$this->charset.$this->newline; $hdr .= 'Content-Transfer-Encoding: '.$this->get_content_transfer_encoding(); $this->finalbody = $hdr.$this->newline.$this->newline.$this->body; return; case 'html' : if ($this->send_multipart === FALSE) { $hdr .= 'Content-Type: text/html; charset='.$this->charset.$this->newline; $hdr .= 'Content-Transfer-Encoding: quoted-printable'.$this->newline.$this->newline; } else { $hdr .= 'Content-Type: multipart/alternative; boundary="'.$alt_boundary.'"'.$this->newline.$this->newline; $body .= $this->insert_mime_message().$this->newline.$this->newline; $body .= '--'.$alt_boundary.$this->newline; $body .= 'Content-Type: text/plain; charset='.$this->charset.$this->newline; $body .= 'Content-Transfer-Encoding: '.$this->get_content_transfer_encoding().$this->newline.$this->newline; $body .= $this->alt_message.$this->newline.$this->newline.'--'.$alt_boundary.$this->newline; $body .= 'Content-Type: text/html; charset='.$this->charset.$this->newline; $body .= 'Content-Transfer-Encoding: quoted-printable'.$this->newline.$this->newline; } $this->finalbody = $body.$this->prep_quoted_printable($this->body).$this->newline.$this->newline; $this->finalbody = $hdr.$this->finalbody; if ($this->send_multipart !== FALSE) { $this->finalbody .= '--'.$alt_boundary.'--'; } return; case 'plain-attach' : $hdr .= 'Content-Type: multipart/'.$this->multipart_subtype.'; boundary="'.$atc_boundary.'"'.$this->newline.$this->newline; $body .= $this->insert_mime_message().$this->newline.$this->newline; $body .= '--'.$atc_boundary.$this->newline; $body .= 'Content-Type: text/plain; charset='.$this->charset.$this->newline; $body .= 'Content-Transfer-Encoding: '.$this->get_content_transfer_encoding().$this->newline.$this->newline; $body .= $this->body.$this->newline.$this->newline; break; case 'html-attach' : $hdr .= 'Content-Type: multipart/'.$this->multipart_subtype.'; boundary="'.$atc_boundary.'"'.$this->newline.$this->newline; $body .= $this->insert_mime_message().$this->newline.$this->newline; $body .= '--'.$atc_boundary.$this->newline; $body .= 'Content-Type: multipart/alternative; boundary="'.$alt_boundary.'"'.$this->newline.$this->newline; $body .= '--'.$alt_boundary.$this->newline; $body .= 'Content-Type: text/plain; charset='.$this->charset.$this->newline; $body .= 'Content-Transfer-Encoding: '.$this->get_content_transfer_encoding().$this->newline.$this->newline; $body .= $this->alt_message.$this->newline.$this->newline.'--'.$alt_boundary.$this->newline; $body .= 'Content-Type: text/html; charset='.$this->charset.$this->newline; $body .= 'Content-Transfer-Encoding: quoted-printable'.$this->newline.$this->newline; $body .= $this->prep_quoted_printable($this->body).$this->newline.$this->newline; $body .= '--'.$alt_boundary.'--'.$this->newline.$this->newline; break; } $attachment = array(); for ($i = 0, $c = count($this->attachments), $z = 0; $i < $c; $i++) { $attachment[$z++] = '--'.$atc_boundary.$this->newline .'Content-type: '.$this->attachments[$i]['content_type'].'; ' .'name="'.$this->attachments[$i]['name'].'"'.$this->newline .'Content-Disposition: '.$this->attachments[$i]['content_disposition'].';'.$this->newline .'Content-Transfer-Encoding: base64'.$this->newline; $attachment[$z++] = chunk_split(base64_encode($this->attachments[$i]['content'])); } $body .= implode($this->newline, $attachment).$this->newline.'--'.$atc_boundary.'--'; $this->finalbody = $hdr.$body; return TRUE; } private function prep_quoted_printable($str) { $str = str_replace(array('{unwrap}', '{/unwrap}'), '', $str); if ($this->crlf === "\r\n") { return quoted_printable_encode($str); } $str = preg_replace(array('| +|', '/\x00+/'), array(' ', ''), $str); if (strpos($str, "\r") !== FALSE) { $str = str_replace(array("\r\n", "\r"), "\n", $str); } $escape = '='; $output = ''; foreach (explode("\n", $str) as $line) { $length = strlen($line); $temp = ''; for ($i = 0; $i < $length; $i++) { $char = $line[$i]; $ascii = ord($char); if ($i === ($length - 1) && ($ascii === 32 || $ascii === 9)) { $char = $escape.sprintf('%02s', dechex($ascii)); } elseif ($ascii === 61) { $char = $escape.strtoupper(sprintf('%02s', dechex($ascii))); } if ((strlen($temp) + strlen($char)) >= 76) { $output .= $temp.$escape.$this->crlf; $temp = ''; } $temp .= $char; } $output .= $temp.$this->crlf; } return substr($output, 0, strlen($this->crlf) * -1); } private function prep_q_encoding($str) { $str = str_replace(array("\r", "\n"), '', $str); if ($this->charset === 'UTF-8') { if (extension_loaded('mbstring')) { mb_internal_encoding($this->charset); return mb_encode_mimeheader($str, $this->charset, 'Q', $this->crlf); } elseif (extension_loaded('iconv')) { $output = @iconv_mime_encode('', $str, array( 'scheme' => 'Q', 'line-length' => 76, 'input-charset' => $this->charset, 'output-charset' => $this->charset, 'line-break-chars' => $this->crlf ) ); if ($output !== FALSE) { return substr($output, 2); } $chars = iconv_strlen($str, 'UTF-8'); } } $chars = isset($chars) ? strlen($str) : $chars; $output = '=?'.$this->charset.'?Q?'; for ($i = 0, $length = strlen($output), $iconv = extension_loaded('iconv'); $i < $chars; $i++) { $chr = ($this->charset === 'UTF-8' && $iconv === TRUE) ? '='.implode('=', str_split(strtoupper(bin2hex(iconv_substr($str, $i, 1, $this->charset))), 2)) : '='.strtoupper(bin2hex($str[$i])); if ($length + ($l = strlen($chr)) > 74) { $output .= '?='.$this->crlf .' =?'.$this->charset.'?Q?'.$chr; $length = 6 + strlen($this->charset) + $l; } else { $output .= $chr; $length += $l; } } return $output.'?='; } private function unwrap_specials() { $this->finalbody = preg_replace_callback('/\{unwrap\}(.*?)\{\/unwrap\}/si', array($this, 'remove_nl_callback'), $this->finalbody); } private function remove_nl_callback($matches) { if (strpos($matches[1], "\r") !== FALSE || strpos($matches[1], "\n") !== FALSE) { $matches[1] = str_replace(array("\r\n", "\r", "\n"), '', $matches[1]); } return $matches[1]; } private function spool_email() { $this->unwrap_specials(); if ( ! $this->smtp_connect()) { $this->set_error_message('email_send_failure_smtp'); return FALSE; } if ( ! $this->smtp_auth()) { $this->set_error_message('email_send_failure_smtp'); return FALSE; } $return_path = ($this->return_path !== '') ? $this->return_path : $this->headers['From']; $this->send_smtp_command('from', $this->extract_email($return_path)); foreach ($this->to_recipients as $val) { $this->send_smtp_command('to', $val); } if (count($this->cc_recipients) > 0) { foreach ($this->cc_recipients as $val) { if ($val !== '') { $this->send_smtp_command('to', $val); } } } if (count($this->bcc_recipients) > 0) { foreach ($this->bcc_recipients as $val) { if ($val !== '') { $this->send_smtp_command('to', $val); } } } $this->send_smtp_command('data'); $this->send_smtp_data($this->header_str.preg_replace('/^\./m', '..$1', $this->finalbody)); $this->send_smtp_data('.'); $reply = $this->get_smtp_data(); $this->set_error_message($reply); if (strpos($reply, '250') !== 0) { $this->set_error_message('email_smtp_error', $reply); $this->set_error_message('email_send_failure_smtp'); return FALSE; } if ($this->smtp_keepalive) { $this->send_smtp_command('reset'); } else { $this->send_smtp_command('quit'); } $this->set_error_message('email_sent_success'); return TRUE; } private function smtp_connect() { if (is_resource($this->smtp_connection_fp)) { return TRUE; } $ssl = ($this->smtp_crypto === 'ssl') ? 'ssl://' : ''; $this->smtp_connection_fp = fsockopen($ssl.$this->smtp_host, $this->smtp_port, $errno, $errstr, $this->smtp_connection_timeout); if ( ! is_resource($this->smtp_connection_fp)) { $this->set_error_message('email_smtp_error', $errno.' '.$errstr); return FALSE; } stream_set_timeout($this->smtp_connection_fp, $this->smtp_connection_timeout); $this->set_error_message($this->get_smtp_data()); if ($this->smtp_crypto === 'tls') { $this->send_smtp_command('hello'); $this->send_smtp_command('starttls'); $crypto = stream_socket_enable_crypto($this->smtp_connection_fp, TRUE, STREAM_CRYPTO_METHOD_TLS_CLIENT); if ($crypto !== TRUE) { $this->set_error_message('email_smtp_tls_error', $this->get_smtp_data()); return FALSE; } } return $this->send_smtp_command('hello'); } private function send_smtp_command($cmd, $data = '') { switch ($cmd) { case 'hello' : $hostname = (isset($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : 'localhost.localdomain'; $this->send_smtp_data('EHLO '.$hostname); $server_reply = 250; break; case 'starttls' : $this->send_smtp_data('STARTTLS'); $server_reply = 220; break; case 'from' : $this->send_smtp_data('MAIL FROM:<'.$data.'> RET=FULL'); $server_reply = 250; break; case 'to' : if ($this->smtp_dsn) { $this->send_smtp_data('RCPT TO:<'.$data.'> NOTIFY=SUCCESS,DELAY,FAILURE ORCPT=rfc822;'.$data); } else { $this->send_smtp_data('RCPT TO:<'.$data.'>'); } $server_reply = 250; break; case 'data' : $this->send_smtp_data('DATA'); $server_reply = 354; break; case 'reset' : $this->send_smtp_data('RSET'); $server_reply = 250; case 'quit' : $this->send_smtp_data('QUIT'); $server_reply = 221; break; } $reply = $this->get_smtp_data(); $this->debug_msg[] = '<pre>'.$cmd.': '.$reply.'</pre>'; if ((int) substr($reply, 0, 3) !== $server_reply) { $this->set_error_message('email_smtp_error', $reply); return FALSE; } if ($cmd === 'quit') { fclose($this->smtp_connection_fp); } return TRUE; } private function smtp_auth() { $this->send_smtp_data('AUTH LOGIN'); $reply = $this->get_smtp_data(); if (strpos($reply, '503') === 0) { return TRUE; } elseif (strpos($reply, '334') !== 0) { $this->set_error_message('email_failed_smtp_login', $reply); return FALSE; } $this->send_smtp_data(base64_encode($this->smtp_user)); $reply = $this->get_smtp_data(); if (strpos($reply, '334') !== 0) { $this->set_error_message('email_smtp_auth_un', $reply); return FALSE; } $this->send_smtp_data(base64_encode($this->smtp_pass)); $reply = $this->get_smtp_data(); if (strpos($reply, '235') !== 0) { $this->set_error_message('email_smtp_auth_pw', $reply); return FALSE; } return TRUE; } private function send_smtp_data($data) { if ( ! fwrite($this->smtp_connection_fp, $data . $this->newline)) { $this->set_error_message('email_smtp_data_failure', $data); return FALSE; } return TRUE; } private function get_smtp_data() { $data = ''; while ($str = fgets($this->smtp_connection_fp, 512)) { $data .= $str; if ($str[3] === ' ') { break; } } return $data; } private function set_error_message($msg, $val = '') { $error_messages = array( 'email_invalid_address' => "Invalid email address: %s", 'email_attachment_missing' => "Unable to locate the following email attachment: %s", 'email_attachment_unreadable' => "Unable to open this attachment: %s", 'email_no_recipients' => 'You must include recipients: To, Cc, or Bcc', 'email_send_failure_smtp' => 'Unable to send email using SMTP.  Your server might not be configured to send mail using this method.', 'email_sent_success' => 'Your message has been successfully sent using SMTP', 'email_smtp_error' => "The following SMTP error was encountered: %s", 'email_smtp_tls_error' => "Failed to send email using SMTP over TLS layer: %s", 'email_failed_smtp_login' => "Failed to send AUTH LOGIN command. Error: %s", 'email_smtp_auth_un' => "Failed to authenticate username. Error: %s", 'email_smtp_auth_pw' => "Failed to authenticate password. Error: %s", 'email_smtp_data_failure' => "Unable to send data: %s", 'email_exit_status' => "Exit status code: %s" ); if (array_key_exists($msg, $error_messages)) { $this->debug_msg[] = str_replace('%s', $val, $error_messages[$msg])."<br />"; } else { $this->debug_msg[] = str_replace('%s', $val, $msg)."<br />"; } } private function mime_types($ext = '') { $mimes = array( 'hqx' => array('application/mac-binhex40', 'application/mac-binhex', 'application/x-binhex40', 'application/x-mac-binhex40'), 'cpt' => 'application/mac-compactpro', 'csv' => array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'application/x-csv', 'text/x-csv', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel', 'text/plain'), 'bin' => array('application/macbinary', 'application/mac-binary', 'application/octet-stream', 'application/x-binary', 'application/x-macbinary'), 'dms' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'exe' => array('application/octet-stream', 'application/x-msdownload'), 'class' => 'application/octet-stream', 'psd' => array('application/x-photoshop', 'image/vnd.adobe.photoshop'), 'so' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => array('application/pdf', 'application/force-download', 'application/x-download', 'binary/octet-stream'), 'ai' => array('application/pdf', 'application/postscript'), 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => array('application/vnd.ms-excel', 'application/msexcel', 'application/x-msexcel', 'application/x-ms-excel', 'application/x-excel', 'application/x-dos_ms_excel', 'application/xls', 'application/x-xls', 'application/excel', 'application/download', 'application/vnd.ms-office', 'application/msword'), 'ppt' => array('application/powerpoint', 'application/vnd.ms-powerpoint'), 'pptx' => array('application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/x-zip', 'application/zip'), 'wbxml' => 'application/wbxml', 'wmlc' => 'application/wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'gz' => 'application/x-gzip', 'gzip' => 'application/x-gzip', 'php' => array('application/x-httpd-php', 'application/php', 'application/x-php', 'text/php', 'text/x-php', 'application/x-httpd-php-source'), 'php4' => 'application/x-httpd-php', 'php3' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'js' => array('application/x-javascript', 'text/plain'), 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => array('application/x-tar', 'application/x-gzip-compressed'), 'xhtml' => 'application/xhtml+xml', 'xht' => 'application/xhtml+xml', 'zip' => array('application/x-zip', 'application/zip', 'application/x-zip-compressed', 'application/s-compressed', 'multipart/x-zip'), 'rar' => array('application/x-rar', 'application/rar', 'application/x-rar-compressed'), 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mpga' => 'audio/mpeg', 'mp2' => 'audio/mpeg', 'mp3' => array('audio/mpeg', 'audio/mpg', 'audio/mpeg3', 'audio/mp3'), 'aif' => array('audio/x-aiff', 'audio/aiff'), 'aiff' => array('audio/x-aiff', 'audio/aiff'), 'aifc' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'rv' => 'video/vnd.rn-realvideo', 'wav' => array('audio/x-wav', 'audio/wave', 'audio/wav'), 'bmp' => array('image/bmp', 'image/x-windows-bmp'), 'gif' => 'image/gif', 'jpeg' => array('image/jpeg', 'image/pjpeg'), 'jpg' => array('image/jpeg', 'image/pjpeg'), 'jpe' => array('image/jpeg', 'image/pjpeg'), 'png' => array('image/png', 'image/x-png'), 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'css' => array('text/css', 'text/plain'), 'html' => array('text/html', 'text/plain'), 'htm' => array('text/html', 'text/plain'), 'shtml' => array('text/html', 'text/plain'), 'txt' => 'text/plain', 'text' => 'text/plain', 'log' => array('text/plain', 'text/x-log'), 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'xml' => array('application/xml', 'text/xml', 'text/plain'), 'xsl' => array('application/xml', 'text/xsl', 'text/xml'), 'mpeg' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'qt' => 'video/quicktime', 'mov' => 'video/quicktime', 'avi' => array('video/x-msvideo', 'video/msvideo', 'video/avi', 'application/x-troff-msvideo'), 'movie' => 'video/x-sgi-movie', 'doc' => array('application/msword', 'application/vnd.ms-office'), 'docx' => array('application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/zip', 'application/msword', 'application/x-zip'), 'dot' => array('application/msword', 'application/vnd.ms-office'), 'dotx' => array('application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/zip', 'application/msword'), 'xlsx' => array('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/zip', 'application/vnd.ms-excel', 'application/msword', 'application/x-zip'), 'word' => array('application/msword', 'application/octet-stream'), 'xl' => 'application/excel', 'eml' => 'message/rfc822', 'json' => array('application/json', 'text/json'), 'pem' => array('application/x-x509-user-cert', 'application/x-pem-file', 'application/octet-stream'), 'p10' => array('application/x-pkcs10', 'application/pkcs10'), 'p12' => 'application/x-pkcs12', 'p7a' => 'application/x-pkcs7-signature', 'p7c' => array('application/pkcs7-mime', 'application/x-pkcs7-mime'), 'p7m' => array('application/pkcs7-mime', 'application/x-pkcs7-mime'), 'p7r' => 'application/x-pkcs7-certreqresp', 'p7s' => 'application/pkcs7-signature', 'crt' => array('application/x-x509-ca-cert', 'application/x-x509-user-cert', 'application/pkix-cert'), 'crl' => array('application/pkix-crl', 'application/pkcs-crl'), 'der' => 'application/x-x509-ca-cert', 'kdb' => 'application/octet-stream', 'pgp' => 'application/pgp', 'gpg' => 'application/gpg-keys', 'sst' => 'application/octet-stream', 'csr' => 'application/octet-stream', 'rsa' => 'application/x-pkcs7', 'cer' => array('application/pkix-cert', 'application/x-x509-ca-cert'), '3g2' => 'video/3gpp2', '3gp' => 'video/3gp', 'mp4' => 'video/mp4', 'm4a' => 'audio/x-m4a', 'f4v' => 'video/mp4', 'webm' => 'video/webm', 'aac' => 'audio/x-acc', 'm4u' => 'application/vnd.mpegurl', 'm3u' => 'text/plain', 'xspf' => 'application/xspf+xml', 'vlc' => 'application/videolan', 'wmv' => array('video/x-ms-wmv', 'video/x-ms-asf'), 'au' => 'audio/x-au', 'ac3' => 'audio/ac3', 'flac' => 'audio/x-flac', 'ogg' => 'audio/ogg', 'kmz' => array('application/vnd.google-earth.kmz', 'application/zip', 'application/x-zip'), 'kml' => array('application/vnd.google-earth.kml+xml', 'application/xml', 'text/xml'), 'ics' => 'text/calendar', 'zsh' => 'text/x-scriptzsh', '7zip' => array('application/x-compressed', 'application/x-zip-compressed', 'application/zip', 'multipart/x-zip'), 'cdr' => array('application/cdr', 'application/coreldraw', 'application/x-cdr', 'application/x-coreldraw', 'image/cdr', 'image/x-cdr', 'zz-application/zz-winassoc-cdr'), 'wma' => array('audio/x-ms-wma', 'video/x-ms-asf'), 'jar' => array('application/java-archive', 'application/x-java-application', 'application/x-jar', 'application/x-compressed') ); $ext = strtolower($ext); if (isset($mimes[$ext])) { return is_array($mimes[$ext]) ? current($mimes[$ext]) : $mimes[$ext]; } return 'application/x-unknown-content-type'; } } 