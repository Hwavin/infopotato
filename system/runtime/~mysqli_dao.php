<?php
 class MySQLi_DAO extends Base_DAO { public function __construct(array $config = NULL) { if ( ! $this->dbh) { if ( ! $this->dbh = new mysqli($config['host'], $config['user'], $config['pass'], $config['name'])) { halt('An Error Was Encountered', 'Error establishing MySQL database connection. Correct user/password? Correct hostname? Correct database name? Database server running?', 'sys_error'); } else { if (method_exists($this->dbh, 'set_charset')) { $this->dbh->set_charset($config['charset']); } else { $collation_query = "SET NAMES '{$config['charset']}'"; if ( ! empty($config['collate'])) { $collation_query .= " COLLATE '{$config['collate']}'"; } $this->query($collation_query); } } } } public function prepare($query, array $params = NULL) { if (count($params) > 0) { foreach ($params as $v) { if ($this->dbh && isset($this->dbh)) { $v = $this->dbh->real_escape_string($v); } else { $v = addslashes($v); } } $query = str_replace("'?'", '?', $query); $query = str_replace('"?"', '?', $query); $query = str_replace('?', "'%s'", $query); $query = vsprintf($query, $params); } return $query; } public function query($query) { $return_val = 0; $this->flush(); $query = trim($query); $this->last_query = $query; $result = $this->dbh->query($query); if ($err_msg = $this->dbh->error) { halt('An Error Was Encountered', $err_msg, 'sys_error'); return FALSE; } if (preg_match("/^(insert|delete|update|replace)\s+/i", $query)) { $this->rows_affected = $this->dbh->affected_rows; if (preg_match("/^(insert|replace)\s+/i", $query)) { $this->last_insert_id = $this->dbh->insert_id; } $return_val = $this->rows_affected; } else { $num_rows = 0; while ($row = $result->fetch_object()) { $this->last_result[$num_rows] = $row; $num_rows++; } $result->free_result(); $this->num_rows = $num_rows; $return_val = $this->num_rows; } return $return_val; } public function now() { return 'NOW()'; } public function trans_begin() { $this->dbh->query('SET AUTOCOMMIT=0'); $this->dbh->query('START TRANSACTION'); } public function trans_commit() { $this->dbh->query('COMMIT'); $this->dbh->query('SET AUTOCOMMIT=1'); } public function trans_rollback() { $this->dbh->query('ROLLBACK'); $this->dbh->query('SET AUTOCOMMIT=1'); } } 