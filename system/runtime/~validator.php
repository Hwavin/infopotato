<?php
 class Validator { private function __construct() { if (function_exists('mb_internal_encoding')) { mb_internal_encoding('UTF-8'); } } private function invalid_argument_value($func_name) { exit('The provided argument value of '."'".$func_name."()'".' is invalid.'); } public static function equals($input_1, $input_2) { return ($input_1 === $input_2); } public static function not_empty($input) { if ( ! is_string($input)) { $this->invalid_argument_value('not_empty'); } return trim($input) !== ''; } public static function min_length($input, $min) { if ( ! is_string($input) || ! is_int($min)) { $this->invalid_argument_value('min_length'); } if (function_exists('mb_strlen')) { return (mb_strlen($input) < $min) ? FALSE : TRUE; } return (strlen(utf8_decode($input)) < $min) ? FALSE : TRUE; } public static function max_length($input, $max) { if ( ! is_string($input) || ! is_int($max)) { $this->invalid_argument_value('max_length'); } if (function_exists('mb_strlen')) { return (mb_strlen($input) > $max) ? FALSE : TRUE; } return (strlen(utf8_decode($input)) > $max) ? FALSE : TRUE; } public static function exact_length($input, $val) { if ( ! is_string($input) || ! is_int($val)) { $this->invalid_argument_value('exact_length'); } if (function_exists('mb_strlen')) { return (mb_strlen($input) !== $val) ? FALSE : TRUE; } return (strlen(utf8_decode($input)) !== $val) ? FALSE : TRUE; } public static function is_email($input) { if ( ! is_string($input)) { $this->invalid_argument_value('is_email'); } return filter_var($input, FILTER_VALIDATE_EMAIL); } public static function is_url($input) { if ( ! is_string($input)) { $this->invalid_argument_value('is_url'); } return filter_var($input, FILTER_VALIDATE_URL); } public static function is_phone($input) { if ( ! is_string($input)) { $this->invalid_argument_value('is_phone'); } return ! empty($input) && preg_match('/^[+]?([\d]{0,3})?[\(\.\-\s]?([\d]{1,3})[\)\.\-\s]*(([\d]{3})[\.\-\s]?([\d]{4})|([\d]{2}[\.\-\s]?){4})$/', $input); } function is_date($date, $format = 'YYYY-MM-DD') { $allowed_formats = array( 'YYYY/MM/DD', 'YYYY-MM-DD', 'YYYY/DD/MM', 'YYYY-DD-MM', 'DD-MM-YYYY', 'DD/MM/YYYY', 'MM-DD-YYYY', 'MM/DD/YYYY', 'YYYYMMDD', 'YYYYDDMM' ); if ( ! is_string($date) || ! in_array($format, $allowed_formats)) { $this->invalid_argument_value('is_date'); } switch($format) { case 'YYYY/MM/DD': case 'YYYY-MM-DD': list($y, $m, $d) = preg_split('/[-\.\/ ]/', $date); break; case 'YYYY/DD/MM': case 'YYYY-DD-MM': list($y, $d, $m) = preg_split('/[-\.\/ ]/', $date); break; case 'DD-MM-YYYY': case 'DD/MM/YYYY': list($d, $m, $y) = preg_split('/[-\.\/ ]/', $date); break; case 'MM-DD-YYYY': case 'MM/DD/YYYY': list($m, $d, $y) = preg_split('/[-\.\/ ]/', $date); break; case 'YYYYMMDD': $y = substr($date, 0, 4); $m = substr($date, 4, 2); $d = substr($date, 6, 2); break; case 'YYYYDDMM': $y = substr($date, 0, 4); $d = substr($date, 4, 2); $m = substr($date, 6, 2); break; } return checkdate($m, $d, $y); } public static function is_ip($input, $type = 'both') { if ( ! is_string($input) || ! is_string($type) || ! in_array($type, array('ipv4', 'ipv6', 'both'))) { $this->invalid_argument_value('is_ip'); } $type = strtolower($type); $flags = 0; if ($type === 'ipv4') { $flags = FILTER_FLAG_IPV4; } if ($type === 'ipv6') { $flags = FILTER_FLAG_IPV6; } return (bool) filter_var($input, FILTER_VALIDATE_IP, array('flags' => $flags)); } public static function is_alpha($input) { if ( ! is_string($input)) { $this->invalid_argument_value('is_alpha'); } return preg_match('/^([a-z])+$/i', $input); } public static function is_alpha_numeric($input) { if ( ! is_string($input)) { $this->invalid_argument_value('is_alpha_numeric'); } return preg_match('/^([a-z0-9])+$/i', $input); } public static function is_greater_than($input, $min) { if ( ! is_numeric($input) || ! is_numeric($min)) { $this->invalid_argument_value('is_greater_than'); } return $input > $min; } public static function is_less_than($input, $max) { if ( ! is_numeric($input) || ! is_numeric($max)) { $this->invalid_argument_value('is_less_than'); } return $input < $max; } public static function is_natural_number($input, $allow_zero = FALSE) { $regex = $allow_zero ? '/^(?:0|[1-9][0-9]*)$/' : '/^[1-9][0-9]*$/'; return preg_match($regex, $input) ? TRUE : FALSE; } } 