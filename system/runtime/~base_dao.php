<?php
 define('OBJECT', 'OBJECT'); define('ARRAY_A', 'ARRAY_A'); define('ARRAY_N', 'ARRAY_N'); class Base_DAO { public $last_query; public $last_result = array(); public $last_insert_id; public function __construct(array $config = NULL) {} public function prepare($query, array $params = NULL) {} public function query($query) {} public function now() {} public function flush() { $this->last_result = array(); $this->last_query = NULL; } public function get_var($query = NULL, $x = 0, $y = 0) { if ($query) { $this->query($query); } if ($this->last_result[$y]) { $values = array_values(get_object_vars($this->last_result[$y])); } return (isset($values[$x]) && $values[$x] !== '') ? $values[$x] : NULL; } public function get_row($query = NULL, $output = OBJECT, $y = 0) { if ($query) { $this->query($query); } else { return NULL; } if ($output == OBJECT) { return $this->last_result[$y] ? $this->last_result[$y] : NULL; } elseif ($output == ARRAY_A) { return $this->last_result[$y] ? get_object_vars($this->last_result[$y]) : NULL; } elseif ($output == ARRAY_N) { return $this->last_result[$y] ? array_values(get_object_vars($this->last_result[$y])) : NULL; } else { halt('A System Error Was Encountered', " \$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N", 'sys_error'); } } public function get_col($query = NULL, $x = 0) { if ($query) { $this->query($query); } $new_array = array(); for ($i = 0; $i < count($this->last_result); $i++) { $new_array[$i] = $this->get_var(NULL, $x, $i); } return $new_array; } public function get_results($query = NULL, $output = OBJECT) { if ($query) { $this->query($query); } else { return NULL; } if ($output == OBJECT) { return $this->last_result; } elseif ($output == ARRAY_A || $output == ARRAY_N) { if ($this->last_result) { $i = 0; foreach((array)$this->last_result as $row) { $new_array[$i] = get_object_vars($row); if ($output == ARRAY_N) { $new_array[$i] = array_values($new_array[$i]); } $i++; } return $new_array; } else { return NULL; } } } public function trans_begin() {} public function trans_commit() {} public function trans_rollback() {} } 