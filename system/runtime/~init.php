<?php
spl_autoload_register('auto_load'); unset($_GET); unset($_REQUEST); $_POST = isset($_POST) ? sanitize($_POST) : array(); $_COOKIE = isset($_COOKIE) ? sanitize($_COOKIE) : array(); switch (ENVIRONMENT) { case 'development': ini_set('error_reporting', E_ALL | E_STRICT); break; case 'production': ini_set('error_reporting', 0); break; default: exit('The application environment is not set correctly.'); } function auto_load($class_name) { $class_name = strtolower($class_name); $runtime_list = array( 'manager', 'dumper', 'utf8', 'i18n', 'cookie', 'session', 'data', 'base_dao', 'mysql_dao', 'mysqli_dao', 'postgresql_dao', 'sqlite_dao' ); if (in_array($class_name, $runtime_list)) { if (SYS_RUNTIME_CACHE === TRUE) { $file = SYS_RUNTIME_DIR.'~'.$class_name.'.php'; if ( ! file_exists($file)) { file_put_contents($file, php_strip_whitespace(SYS_CORE_DIR.$class_name.'.php')); } } else { $file = SYS_CORE_DIR.$class_name.'.php'; } } else { $file = APP_MANAGER_DIR.$class_name.'.php'; if ( ! file_exists($file)) { halt('An Error Was Encountered', 'Manager file does not exist', 'sys_error', 404); } } require $file; } function halt($heading, $message, $template = 'sys_error', $status_code = 404) { if (isset($status_code)) { $stati = array( 400 => 'Bad Request', 401 => 'Authorization Required', 403 => 'Forbidden', 404 => 'Not Found', 500 => 'Internal Server Error', ); if (isset($stati[$status_code])) { $status_text = $stati[$status_code]; } $server_protocol = (isset($_SERVER['SERVER_PROTOCOL'])) ? $_SERVER['SERVER_PROTOCOL'] : FALSE; if (substr(php_sapi_name(), 0, 3) == 'cgi') { header("Status: {$status_code} {$status_text}", TRUE); } elseif ($server_protocol == 'HTTP/1.1' || $server_protocol == 'HTTP/1.0') { header($server_protocol." {$status_code} {$status_text}", TRUE, $status_code); } else { header("HTTP/1.1 {$status_code} {$status_text}", TRUE, $status_code); } } if (ENVIRONMENT === 'development') { ob_start(); require SYS_CORE_DIR.'sys_templates'.DS.$template.'.php'; $buffer = ob_get_contents(); ob_end_clean(); echo $buffer; exit; } } function dump($var, $force_type = '', $collapsed = FALSE) { Dumper::dump($var, $force_type, $collapsed); } function __($str, array $values = array()) { $str = I18n::get($str); return empty($values) ? $str : strtr($str, $values); } function sanitize($value) { if (is_array($value)) { foreach ($value as $key => $val) { $value[$key] = sanitize($val); } } if (is_string($value)) { if (get_magic_quotes_gpc()) { $value = stripslashes($value); } if (strpos($value, "\r") !== FALSE) { $value = str_replace(array("\r\n", "\r"), "\n", $value); } } return $value; } function dispatch() { $request_method = (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] === 'POST') ? 'post' : 'get'; $request_uri = isset($_SERVER['PATH_INFO']) ? trim($_SERVER['PATH_INFO'], '/') : ''; $uri_segments = ! empty($request_uri) ? explode('/', $request_uri) : array(); $manager_name = ! empty($uri_segments[0]) ? strtolower($uri_segments[0]) : strtolower(APP_DEFAULT_MANAGER); $method_name = ! empty($uri_segments[1]) ? strtolower($uri_segments[1]) : strtolower(APP_DEFAULT_MANAGER_METHOD); $real_method = $request_method.'_'.$method_name; $params_cnt = count($uri_segments); $params = array(); for ($i = 2; $i < $params_cnt; $i++) { $params[] = $uri_segments[$i]; } $manager_class = $manager_name.'_manager'; $manager_obj = new $manager_class; if ( ! method_exists($manager_obj, $real_method)) { halt('An Error Was Encountered', "The requested manager method '{$real_method}' does not exist in object '{$manager_class}'", 'sys_error'); } $manager_obj->{$real_method}($params); } 