<?php
 class Logger { const STATUS_LOG_OPEN = 1; const STATUS_OPEN_FAILED = 2; const STATUS_LOG_CLOSED = 3; const NO_ARGUMENTS = 'NO_ARGUMENTS'; private static $severity_levels = array( 'ERROR' => 0, 'WARN' => 1, 'INFO' => 2, 'DEBUG' => 3, ); private static $severity_threshold; private static $log_status = self::STATUS_LOG_CLOSED; private static $log_file_path = NULL; private static $file_handle = NULL; private static $messages = array( 'write_fail' => 'Failed to write the log message to log files. Please check file permissions to make it writable.', 'open_fail' => 'Failed to open the log files. Please check permissions.', 'invalid_level' => 'The logging severity level you provided is invalid', ); private static $date_format = 'Y-m-d G:i:s'; private static $default_permissions = 0777; private function __construct() {} public static function set_severity_threshold($level) { if (isset(self::$severity_levels[$level])) { self::$severity_threshold = self::$severity_levels[$level]; } else { exit(self::$messages['invalid_level']); } } public static function set_date_format($date_format) { self::$date_format = $date_format; } public static function log_error($log_dir, $line, $args = self::NO_ARGUMENTS) { self::log($log_dir, $line, self::$severity_levels['ERROR'], $args); } public static function log_warn($log_dir, $line, $args = self::NO_ARGUMENTS) { self::log($log_dir, $line, self::$severity_levels['WARN'], $args); } public static function log_info($log_dir, $line, $args = self::NO_ARGUMENTS) { self::log($log_dir, $line, self::$severity_levels['INFO'], $args); } public static function log_debug($log_dir, $line, $args = self::NO_ARGUMENTS) { self::log($log_dir, $line, self::$severity_levels['DEBUG'], $args); } private static function log($log_dir, $line, $severity, $args = self::NO_ARGUMENTS) { if ( ! isset(self::$severity_threshold)) { self::$severity_threshold = self::$severity_levels['DEBUG']; } if ($severity <= self::$severity_threshold) { $log_dir = rtrim($log_dir, '\\/'); self::$log_file_path = $log_dir.DIRECTORY_SEPARATOR.'log_'.date('Y-m-d').'.txt'; if ( ! file_exists($log_dir)) { mkdir($log_dir, self::$default_permissions, TRUE); } if (file_exists(self::$log_file_path) && ! is_writable(self::$log_file_path)) { self::$log_status = self::STATUS_OPEN_FAILED; exit(self::$messages['write_fail']); } if ((self::$file_handle = fopen(self::$log_file_path, 'a'))) { self::$log_status = self::STATUS_LOG_OPEN; } else { self::$log_status = self::STATUS_OPEN_FAILED; exit(self::$messages['open_fail']); } $time = date(self::$date_format); switch ($severity) { case self::$severity_levels['ERROR']: $status = "$time - ERROR -->"; break; case self::$severity_levels['WARN']: $status = "$time - WARN -->"; break; case self::$severity_levels['INFO']: $status = "$time - INFO -->"; break; case self::$severity_levels['DEBUG']: $status = "$time - DEBUG -->"; break; } $line = "$status $line"; if ($args !== self::NO_ARGUMENTS) { $line = $line . '; ' . var_export($args, TRUE); } if (self::$log_status === self::STATUS_LOG_OPEN) { if (fwrite(self::$file_handle, $line.PHP_EOL) === FALSE) { exit(self::$messages['write_fail']); } if (self::$file_handle) { fclose(self::$file_handle); } } } } } 