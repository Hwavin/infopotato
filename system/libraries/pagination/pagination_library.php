<?php
/**
 * PHP pagination class
 */

class Pagination_Library {
	/**
     * @var integer The desired number of items to be shown on each page.
     */
	public $items_per_page = 10;
	
	/**
     * The total number of items you'll be paginating.
	 * @access public
     * @var integer
     */
	public $items_total;
	
	/**
     * @var integer The page the user is viewing.
     */
	public $current_page;
	
	/**
     * @var integer The total number of pages as generated by the pagination method.
     */
	public $num_pages;
	
	/**
     * @var integer The number of pages to show 'around' the current page.
     */
	public $mid_range = 7;
	
	/**
     * @var integer Create an array containing a range of elements
     */
	private $_range;
	
	/**
     * @var integer The number of pages to show 'around' the current page.
     */
	private $_start_range;
	
	/**
     * @var integer The number of pages to show 'around' the current page.
     */
	private $_end_range;
	
	/**
     * @var integer The offset
     */
	public $offset_low;
	
	/**
     * @var integer The offset
     */
	public $offset_high;
	
	/**
	 * Constructor
	 */	
	public function __construct($config = array()) { 
		if (is_array($config) && count($config) > 0) {
			$this->initialize($config);
		}
	}
	
	/**
	 * Initialize the user preferences
	 *
	 * @param	array	config preferences
	 * @return	void
	 */	
	public function initialize($config = array()) {
		foreach ($config as $key => $val) {
			$this->$key = $val;
		}
	}
	
	/**
     * The build_pagination method is what determines how many page numbers to display,
	 * figures out how they should be linked, and applies CSS for styling.
     *
     * @return void
     */
	public function build_pagination() {
		$this->num_pages = ceil($this->items_total/$this->items_per_page);	    
		$prev_page = $this->current_page - 1;
		$next_page = $this->current_page + 1;

		if ($this->num_pages > 1) {
			$this->_start_range = $this->current_page - floor($this->mid_range/2);
			$this->_end_range = $this->current_page + floor($this->mid_range/2);

			if ($this->_start_range <= 0) {
				$this->_end_range += abs($this->_start_range) + 1;
				$this->_start_range = 1;
			}
			if ($this->_end_range > $this->num_pages) {
				$this->_start_range -= $this->_end_range - $this->num_pages;
				$this->_end_range = $this->num_pages;
			}
			// Create an array containing a range of elements
			$this->_range = range($this->_start_range, $this->_end_range);
		} 
		$this->offset_low = ($this->current_page - 1) * $this->items_per_page;
		$this->offset_high = $this->current_page * $this->items_per_page;
		
		return Array(
			'items_total' => $this->items_total,
			'items_per_page' => $this->items_per_page,
			'num_pages' => $this->num_pages,
			'current_page' => $this->current_page,
			'prev_page' => $prev_page,
			'next_page' => $next_page,
			'range' => $this->_range,
			'mid_range' => $this->mid_range,
			'offset_low' => $this->offset_low,
			'offset_high' => $this->offset_high,
		);
	}
}

/* End of file: ./system/libraries/pagination/pagination_library.php */