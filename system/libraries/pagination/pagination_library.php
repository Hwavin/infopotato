<?php
/**
 * Pagination Library
 *
 * @author Zhou Yuan <yuanzhou19@gmail.com>
 * @link http://www.infopotato.com/
 * @copyright Copyright &copy; 2009-2011 Zhou Yuan
 * @license http://www.opensource.org/licenses/mit-license.php MIT Licence
 */
class Pagination_Library {
	/**
     * The desired number of items to be shown on each page.
	 * 
	 * @var integer 
     */
	public $items_per_page = 10;
	
	/**
     * The total number of items you'll be paginating.
     *
     * @var integer
     */
	public $items_total;
	
	/**
     * The page the user is viewing.
	 * 
	 * @var integer 
     */
	public $current_page;
	
	/**
     * The CSS class for current page
	 * 
	 * @var string
     */
	public $current_page_class;
	
	/**
     * The total number of pages as generated by the pagination method.
	 * 
	 * @var integer 
     */
	public $num_pages;
	
	/**
     * The number of pages to show 'around' the current page.
	 * 
	 * @var integer 
     */
	public $mid_range = 7;
	
	/**
     * The offset
	 * 
	 * @var integer 
     */
	public $offset_low;
	
	/**
     * The offset
	 * 
	 * @var integer 
     */
	public $offset_high;
	
	/**
     * The base page URI we are linking to
	 * 
	 * @var string
     */
	public $base_uri;
	
	/**
     * Create an array containing a range of elements
	 * 
	 * @var integer 
     */
	private $_range;
	
	/**
     * The number of pages to show 'around' the current page.
	 * 
	 * @var integer 
     */
	private $_start_range;
	
	/**
     * The number of pages to show 'around' the current page.
	 * 
	 * @var integer 
     */
	private $_end_range;
	
	
	/**
	 * Constructor
	 */	
	public function __construct($config = array()) { 
		if (is_array($config) && count($config) > 0) {
			foreach ($config as $key => $val) {
				$this->$key = $val;
			}
		}
	}

	/**
     * The build_pagination method is what determines how many page numbers to display,
	 * figures out how they should be linked, and applies CSS for styling.
     *
     * @return the pagination string
     */
	public function build_pagination() {
		$this->num_pages = ceil($this->items_total/$this->items_per_page);	    
		$prev_page = $this->current_page - 1;
		$next_page = $this->current_page + 1;

		if ($this->num_pages > 1) {
			$this->_start_range = $this->current_page - floor($this->mid_range/2);
			$this->_end_range = $this->current_page + floor($this->mid_range/2);

			if ($this->_start_range <= 0) {
				$this->_end_range += abs($this->_start_range) + 1;
				$this->_start_range = 1;
			}
			if ($this->_end_range > $this->num_pages) {
				$this->_start_range -= $this->_end_range - $this->num_pages;
				$this->_end_range = $this->num_pages;
			}
			// Create an array containing a range of elements
			$this->_range = range($this->_start_range, $this->_end_range);
		} 
		$this->offset_low = ($this->current_page - 1) * $this->items_per_page;
		$this->offset_high = $this->current_page * $this->items_per_page;
		
		// For easy debug
		$pagination_data = array(
			'items_total' => $this->items_total,
			'items_per_page' => $this->items_per_page,
			'num_pages' => $this->num_pages,
			'current_page' => $this->current_page,
			'prev_page' => $prev_page,
			'next_page' => $next_page,
			'range' => $this->_range,
			'mid_range' => $this->mid_range,
			'offset_low' => $this->offset_low,
			'offset_high' => $this->offset_high
		);
		
		// Create the pagination link
		$output = '';
		if ($pagination_data['current_page'] !== 1) {
			$output = '<a href="'.$this->base_uri.$pagination_data['prev_page'].'">&laquo; Prev</a> ';
		}
		
		for ($i = 1; $i <= $pagination_data['num_pages']; $i++) {
			if ($pagination_data['range'][0] > 2 && $i == $pagination_data['range'][0]) {
				$output .= '...';
			}
			
			if ($i == 1 || $i == $pagination_data['num_pages'] || in_array($i, $pagination_data['range'])) {
				if ($i === $pagination_data['current_page']) {
					$output .= '<span class="'.$this->current_page_class.'">'.$i.'</span>'; 
				} else {
					$output .= '<a href="'.$this->base_uri.$i.'">'.$i.'</a>'; 
				}
			}
			
			if ($pagination_data['range'][$pagination_data['mid_range']-1] < $pagination_data['num_pages']-1 && $i == $pagination_data['range'][$pagination_data['mid_range']-1]) {
				$output .= '...';
			}
		}
		
		if ($pagination_data['current_page'] != $pagination_data['num_pages']) {
			$output .= '<a href="'.$this->base_uri.$pagination_data['next_page'].'">Next &raquo;</a>'; 
		}
		
		return $output;
	}
}

/* End of file: ./system/libraries/pagination/pagination_library.php */