<?php
/**
 * Compiler
 *
 * @author Zhou Yuan <yuanzhou19@gmail.com>
 * @link http://www.infopotato.com/
 * @copyright Copyright &copy; 2009-2011 Zhou Yuan
 * @license http://www.opensource.org/licenses/mit-license.php MIT Licence
 */

define('ROOT', '../'); 
define('LINEBREAK', "\n"); 
define('BRACKET_ON_SAME_LINE', 1); 

/** 
 * This class reads all files from a directory and merge them 
 * into a big one. Very usefull to get some speed if, in each pages, you 
 * include a lot of differents files. 
 */ 
class Compiler { 
    /** 
     * Compile each files from this directory. 
     * 
     * @type   string 
     */ 
    public $dir  = 'lib/'; 
     
    /** 
     * Compiled file
     * 
     * @type   string 
     */ 
    public $file = 'include/all.php'; 

    /** 
     * Constructer
     */ 
    public function __construct() { 
        $this->compile();     
    } 
     
    /** 
     * Compile all files into a single one 
     */ 
    public function compile() { 
        $this->file = ROOT . $this->file; 
        $this->dir  = ROOT . $this->dir; 
         
        $files = ''; 
         
        // Reads all files 
        if ( ! $dp = opendir($this->dir)) { 
            trigger_error('Cannot open directory ' . $this->dir);         
        } 
         
        while ($file = readdir($dp)) { 
            if (($file != '..') && ($file != '.') && (!is_dir($this->dir . $file))) { 
                echo '<code>Compile file ' . $file . ' '; 
                 
                $filelines = file($this->dir . $file); 
                 
                // Remove end of line comments  
                foreach ($filelines as $i => $line) { 
                    $filelines[$i] = trim($filelines[$i]); 
                    $filelines[$i] = preg_replace('/\/\/.*$/m', '', $line); 
                     
                    if ($i % 10 == 0) { 
                        echo '.'; 
                    } 
                } 

                $files .= implode('', $filelines); 
                echo ' <b>done</b><br>'; 
            } 
        } 

        @closedir($dp); 
         
        // Remove php tags 
        $files = str_replace('<?php', '', $files); 
        $files = str_replace('?>', '', $files); 
         
        // Remove block comments 
        $files = preg_replace('/\/\*(.*?)\*\//s', '', $files); 
         
        // Remove unwanted \n         
        $files = preg_replace("/(\r\n)+/s", "\n", $files); 
        $files = preg_replace("/((\r\n)+(\t)+(\r\n)+)/s", "\n", $files); 
        $files = preg_replace("/((\r\n)+(\s)+(\r\n)+)/s", "\n", $files); 

        $files = preg_replace("/(\n)+/s", "\n", $files); 
        $files = preg_replace("/((\n)+(\t)+(\n)+)/s", "\n", $files); 
        $files = preg_replace("/((\n)+(\s)+(\n)+)/s", "\n", $files); 
         
        if (defined('BRACKET_ON_SAME_LINE')) { 
            $files = preg_replace("/(\n)+(\s)*\{/s", "{", $files); 
            $files = preg_replace("/(\r\n)+(\s)*\{/s", "{", $files); 
        } 
         
        // Remove unwanted spaces 
        $files = preg_replace("/( )+/s", " ", $files); 
         
        // Compiled files' header 
        $files = '<?php' . LINEBREAK .                   
                 '// This is a generated files which contains all files from ' . $this->dir . LINEBREAK . 
                 '// Compiled for a speed issue ' . LINEBREAK . 
                 '// Do not edit this file. Instead, edit the file into ' . $this->dir . ' and recompile all' . LINEBREAK . 
                 $files . LINEBREAK . 
                 '?>'; 
         
        // Put all files into a single one 
        if ( ! $fp = fopen($this->file, 'w+')) { 
            trigger_error('Cannot open file ' . $this->file); 
        } 
         
        fwrite($fp, $files, strlen($files)); 
        fclose($fp); 
         
        // Finished 
        echo '<h5 style="font-family : Verdana">Compilation succeeded</h5>'; 
    } 
} 


// End of file: ./system/core/compiler.php
