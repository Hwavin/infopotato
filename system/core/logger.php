<?php
/**
 * A light, permissions-checking logging class
 *
 * @author Zhou Yuan <yuanzhou19@gmail.com>
 * @link http://www.infopotato.com/
 * @copyright Copyright &copy; 2009-2012 Zhou Yuan
 * @license http://www.opensource.org/licenses/mit-license.php MIT Licence
 */
 
/**
 * Usage:
 * $log = new Logger('/var/log/', Logger::INFO);
 * $log->log_info('Returned a million search results'); //Prints to the log file
 * $log->log_fatal('Oh dear.'); //Prints to the log file
 * $log->log_debug('x = 5'); //Prints nothing due to current severity threshhold
 *
 * @author  Kenny Katzgrau <katzgrau@gmail.com>
 * @since   July 26, 2008 â€” Last update July 1, 2012
 * @link    http://codefury.net
 * @version 0.2.0
 */

class Logger {
    /**
     * Error severity, from the most important priority(0) to the least important priority(7). From BSD syslog RFC, secion 4.1.1
     * @link http://www.faqs.org/rfcs/rfc3164.html
     */
    const EMERG = 0;  // Emergency: system is unusable
    const ALERT = 1;  // Alert: action must be taken immediately
    const CRIT = 2;  // Critical: critical conditions
    const ERR = 3;  // Error: error conditions
    const WARN = 4;  // Warning: warning conditions
    const NOTICE = 5;  // Notice: normal but significant condition
    const INFO = 6;  // Informational: informational messages
    const DEBUG = 7;  // Debug: debug messages

    //custom logging level
    /**
     * Log nothing at all
     */
    const OFF = 8;
    
	/**
     * Alias for CRIT
     * @deprecated
     */
    const FATAL = 2;

    /**
     * Internal status codes
     */
    const STATUS_LOG_OPEN = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED = 3;

    /**
     * We need a default argument value in order to add the ability to easily
     * print out objects etc. But we can't use NULL, 0, FALSE, etc, because those
     * are often the values the developers will test for. So we'll make one up.
     */
    const NO_ARGUMENTS = 'Logger::NO_ARGUMENTS';

    /**
     * Current status of the log file
     * @var integer
     */
    private $_log_status = self::STATUS_LOG_CLOSED;
    
	/**
     * Holds messages generated by the class
     * @var array
     */
    private $_message_queue = array();
    
	/**
     * Path to the log file
     * @var string
     */
    private $_log_file_path = NULL;
    
	/**
     * Current minimum logging threshold
     * @var integer
     */
    private $_severity_threshold = self::INFO;
    
	/**
     * This holds the file handle for this instance's log file
     * @var resource
     */
    private $_file_handle = NULL;

    /**
     * Standard messages produced by the class. Can be modified for il8n
     * @var array
     */
    private $_messages = array(
        //'write_fail' => 'The file exists, but could not be opened for writing. Check that appropriate permissions have been set.',
        'write_fail' => 'The file could not be written to. Check that appropriate permissions have been set.',
        'open_success' => 'The log file was opened successfully.',
        'open_fail' => 'The file could not be opened. Check permissions.',
    );

    /**
     * Default severity of log messages, if not specified
     * @var integer
     */
    private static $_default_severity = self::DEBUG;
    
	/**
     * Valid PHP date() format string for log timestamps
     * @var string
     */
    private static $_date_format = 'Y-m-d G:i:s';
    
	/**
     * Octal notation for default permissions of the log file
     * @var integer
     */
    private static $_default_permissions = 0777;
    
	/**
     * Array of Logger instances, part of Singleton pattern
     * @var array
     */
    private static $instances = array();

    /**
     * Partially implements the Singleton pattern. Each $log_dir gets one instance.
     *
     * @param string  $log_dir File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return Logger
     */
    public static function instance($log_dir = FALSE, $severity = FALSE) {
        if ($severity === FALSE) {
            $severity = self::$_default_severity;
        }
        
        if ($log_dir === FALSE) {
            if (count(self::$instances) > 0) {
                return current(self::$instances);
            } else {
                $log_dir = dirname(__FILE__);
            }
        }

        if (in_array($log_dir, self::$instances)) {
            return self::$instances[$log_dir];
        }

        self::$instances[$log_dir] = new self($log_dir, $severity);

        return self::$instances[$log_dir];
    }

    /**
     * Class constructor
     *
     * @param string  $log_dir File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return void
     */
    public function __construct($log_dir, $severity) {
        $log_dir = rtrim($log_dir, '\\/');

        if ($severity === self::OFF) {
            return;
        }

        $this->_log_file_path = $log_dir.DIRECTORY_SEPARATOR.'log_'.date('Y-m-d').'.txt';

        $this->_severity_threshold = $severity;
        if (!file_exists($log_dir)) {
            mkdir($log_dir, self::$_default_permissions, TRUE);
        }

        if (file_exists($this->_log_file_path) && ! is_writable($this->_log_file_path)) {
            $this->_log_status = self::STATUS_OPEN_FAILED;
            $this->_message_queue[] = $this->_messages['write_fail'];
            return;
        }

        if (($this->_file_handle = fopen($this->_log_file_path, 'a'))) {
            $this->_log_status = self::STATUS_LOG_OPEN;
            $this->_message_queue[] = $this->_messages['open_success'];
        } else {
            $this->_log_status = self::STATUS_OPEN_FAILED;
            $this->_message_queue[] = $this->_messages['open_fail'];
        }
    }

    /**
     * Class destructor
     */
    public function __destruct() {
        if ($this->_file_handle) {
            fclose($this->_file_handle);
        }
    }
    /**
     * Writes a $line to the log with a severity level of DEBUG
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_debug($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::DEBUG);
    }

    /**
     * Returns (and removes) the last message from the queue.
     * @return string
     */
    public function get_message() {
        return array_pop($this->_message_queue);
    }

    /**
     * Returns the entire message queue (leaving it intact)
     * @return array
     */
    public function get_messages() {
        return $this->_message_queue;
    }

    /**
     * Empties the message queue
     * @return void
     */
    public function clear_messages() {
        $this->_message_queue = array();
    }

    /**
     * Sets the date format used by all instances of KLogger
     * 
     * @param string $date_format Valid format string for date()
     */
    public static function set_date_format($date_format) {
        self::$_date_format = $date_format;
    }

    /**
     * Writes a $line to the log with a severity level of INFO. Any information
     * can be used here, or it could be used with E_STRICT errors
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_info($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::INFO, $args);
    }

    /**
     * Writes a $line to the log with a severity level of NOTICE. Generally
     * corresponds to E_STRICT, E_NOTICE, or E_USER_NOTICE errors
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_notice($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::NOTICE, $args);
    }

    /**
     * Writes a $line to the log with a severity level of WARN. Generally
     * corresponds to E_WARNING, E_USER_WARNING, E_CORE_WARNING, or 
     * E_COMPILE_WARNING
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_warn($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::WARN, $args);
    }

    /**
     * Writes a $line to the log with a severity level of ERR. Most likely used
     * with E_RECOVERABLE_ERROR
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_error($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::ERR, $args);
    }

    /**
     * Writes a $line to the log with a severity level of FATAL. Generally
     * corresponds to E_ERROR, E_USER_ERROR, E_CORE_ERROR, or E_COMPILE_ERROR
     *
     * @param string $line Information to log
     * @return void
     * @deprecated Use log_crit
     */
    public function log_fatal($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::FATAL, $args);
    }

    /**
     * Writes a $line to the log with a severity level of ALERT.
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_alert($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::ALERT, $args);
    }

    /**
     * Writes a $line to the log with a severity level of CRIT.
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_crit($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::CRIT, $args);
    }

    /**
     * Writes a $line to the log with a severity level of EMERG.
     *
     * @param string $line Information to log
     * @return void
     */
    public function log_emerg($line, $args = self::NO_ARGUMENTS) {
        $this->log($line, self::EMERG, $args);
    }

    /**
     * Writes a $line to the log with the given severity
     *
     * @param string  $line     Text to add to the log
     * @param integer $severity Severity level of log message (use constants)
     */
    public function log($line, $severity, $args = self::NO_ARGUMENTS) {
        if ($this->_severity_threshold >= $severity) {
            $status = $this->_get_time_line($severity);
            
            $line = "$status $line";
            
            if ($args !== self::NO_ARGUMENTS) {
                /* Print the passed object value */
                $line = $line . '; ' . var_export($args, TRUE);
            }
            
			// PHP_EOL: The correct 'End Of Line' symbol for this platform
            $this->write_free_form_line($line.PHP_EOL);
        }
    }

    /**
     * Writes a line to the log without prepending a status or timestamp
     *
     * @param string $line Line to write to the log
     * @return void
     */
    public function write_free_form_line($line) {
        if ($this->_log_status === self::STATUS_LOG_OPEN
            && $this->_severity_threshold !== self::OFF) {
            if (fwrite($this->_file_handle, $line) === FALSE) {
                $this->_message_queue[] = $this->_messages['writefail'];
            }
        }
    }

    private function _get_time_line($level) {
        $time = date(self::$_date_format);

        switch ($level) {
            case self::EMERG:
                return "$time - EMERG -->";
            case self::ALERT:
                return "$time - ALERT -->";
            case self::CRIT:
                return "$time - CRIT -->";
            case self::FATAL: # FATAL is an alias of CRIT
                return "$time - FATAL -->";
            case self::NOTICE:
                return "$time - NOTICE -->";
            case self::INFO:
                return "$time - INFO -->";
            case self::WARN:
                return "$time - WARN -->";
            case self::DEBUG:
                return "$time - DEBUG -->";
            case self::ERR:
                return "$time - ERROR -->";
            default:
                return "$time - LOG -->";
        }
    }
}

// End of file: ./system/core/logger.php