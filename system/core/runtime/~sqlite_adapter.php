<?php
 class SQLite_Adapter extends Data_adapter { public $dbpath = ''; public function __construct($config = array()) { if (is_array($config) && isset($config['path'])) { $this->dbpath = $config['path']; } if ( ! $this->dbh) { $this->connect($this->dbpath); } } public function connect($dbpath = '') { $return_val = FALSE; if ($dbpath === '') { Global_Functions::show_sys_error('An Error Was Encountered', 'Require $dbpath to open an SQLite database', 'sys_error'); } else if ( ! $this->dbh = sqlite_open($dbpath)) { Global_Functions::show_sys_error('An Error Was Encountered', 'Can not find SQLite database file', 'sys_error'); } else { $return_val = TRUE; } return $return_val; } public function prepare($query, $params = array()) { if (count($params) > 0) { foreach ($params as $v) { if ($this->dbh) { $v = sqlite_escape_string($v); } else { } } $query = str_replace("'?'", '?', $query); $query = str_replace('"?"', '?', $query); $query = str_replace('?', "'%s'", $query); $query = vsprintf($query, $params); } return $query; } public function query($query) { $query = str_replace("/[\n\r]/", '', trim($query)); $return_val = 0; $this->flush(); $this->last_query = $query; $result = sqlite_query($this->dbh, $query); if (sqlite_last_error($this->dbh)) { $err_msg = sqlite_error_string(sqlite_last_error($this->dbh)); Global_Functions::show_sys_error('An Error Was Encountered', $err_msg, 'sys_error'); return FALSE; } if (preg_match("/^(insert|delete|update|replace)\s+/i", $query)) { $this->rows_affected = sqlite_changes($this->dbh); if (preg_match("/^(insert|replace)\s+/i", $query)) { $this->last_insert_id = sqlite_last_insert_rowid($this->dbh); } $return_val = $this->rows_affected; } else { $num_rows = 0; while ($row = sqlite_fetch_array($result, SQLITE_ASSOC)) { $obj= (object) $row; $this->last_result[$num_rows] = $obj; $num_rows++; } $this->num_rows = $num_rows; $return_val = $this->num_rows; } return $return_val; } public function now() { return 'now'; } public function trans_begin() { $this->query('BEGIN TRANSACTION'); } public function trans_commit() { $this->query('COMMIT'); } public function trans_rollback() { $this->query('ROLLBACK'); } } 