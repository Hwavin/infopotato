<?php
 define('OBJECT', 'OBJECT'); define('ARRAY_A', 'ARRAY_A'); define('ARRAY_N', 'ARRAY_N'); class Data_Adapter { public $last_query; public $last_result = array(); public $cache_dir = ''; public $cache_queries = FALSE; public $cache_inserts = FALSE; public $use_disk_cache = FALSE; public $cache_timeout = 3600; public $dbh; public $last_insert_id; public function __construct($config = array()) { } public function connect() { } public function prepare($query, $params = array()) { } public function query($query) { } public function now() { } protected function flush() { $this->last_result = NULL; $this->last_query = NULL; $this->from_disk_cache = FALSE; } public function get_var($query = NULL, $x = 0, $y = 0) { if ($query) { $this->query($query); } if ($this->last_result[$y]) { $values = array_values(get_object_vars($this->last_result[$y])); } return (isset($values[$x]) && $values[$x] !== '') ? $values[$x] : NULL; } public function get_row($query = NULL, $output = OBJECT, $y = 0) { if ($query) { $this->query($query); } else { return NULL; } if ($output == OBJECT) { return $this->last_result[$y] ? $this->last_result[$y] : NULL; } elseif ($output == ARRAY_A) { return $this->last_result[$y] ? get_object_vars($this->last_result[$y]) : NULL; } elseif ($output == ARRAY_N) { return $this->last_result[$y] ? array_values(get_object_vars($this->last_result[$y])) : NULL; } else { Global_Functions::show_sys_error('A System Error Was Encountered', " \$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N", 'sys_error'); } } public function get_col($query = NULL, $x = 0) { if ($query) { $this->query($query); } $new_array = array(); for ($i = 0; $i < count($this->last_result); $i++) { $new_array[$i] = $this->get_var(NULL, $x, $i); } return $new_array; } public function get_results($query = NULL, $output = OBJECT) { if ($query) { $this->query($query); } else { return NULL; } if ($output == OBJECT) { return $this->last_result; } elseif ($output == ARRAY_A || $output == ARRAY_N) { if ($this->last_result) { $i = 0; foreach((array)$this->last_result as $row) { $new_array[$i] = get_object_vars($row); if ($output == ARRAY_N) { $new_array[$i] = array_values($new_array[$i]); } $i++; } return $new_array; } else { return NULL; } } } public function store_cache($query, $is_insert) { $cache_file = $this->cache_dir.'/'.md5($query); if ($this->use_disk_cache && ($this->cache_queries && ! $is_insert) || ($this->cache_inserts && $is_insert)) { if ( ! is_dir($this->cache_dir)) { Global_Functions::show_sys_error('A System Error Was Encountered', "Could not open cache dir: {$this->cache_dir}", 'sys_error'); } else { $result_cache = array( 'last_result' => $this->last_result, 'num_rows' => $this->num_rows, 'return_value' => $this->num_rows, ); error_log(serialize($result_cache), 3, $cache_file); } } } public function get_cache($query) { $cache_file = $this->cache_dir.'/'.md5($query); if ($this->use_disk_cache && file_exists($cache_file)) { if ((time() - filemtime($cache_file)) > ($this->cache_timeout)) { unlink($cache_file); } else { $result_cache = unserialize(file_get_contents($cache_file)); $this->last_result = $result_cache['last_result']; $this->num_rows = $result_cache['num_rows']; $this->from_disk_cache = TRUE; return $result_cache['return_value']; } } } public function trans_begin() { } public function trans_commit() { } public function trans_rollback() { } public function vardump($mixed = '') { ob_start(); require_once SYS_DIR.'core'.DS.'sys_templates'.DS.'data_vardump.php'; $html = ob_get_contents(); ob_end_clean(); echo $html; } } 